//coding problem 1
//palindrome.js
let string1 = prompt("RACECAR");
lrt string2 = prompt("RECORDER");
function reverseString(str) {return str.split(''). reverse ().join('')};
console.log("Original String 1:",string1);
console.log("Reversed String 1:", reversedString(string1));
console.log("Original String 2:",string2);
console.log("Reversed String 2:", reversedString(string2));
Original String 1: RACECAR 
Reversed String 1: RACECAR 
Original String 2: RECORDED
Reversed String 2: RECORDED

//coding problem 2
//sortArray.js
let numbers = prompt("24","65","21","5","9","32","42","80","57");
let mergedArray = numbers.concat(names);
console.log("Merged Array:", mergedArray);
let sortedNumbers = ["24","65","21","5","9","32","42","80","57"];
console.log("Sorted Numbers (descending):", sortedNumbers); = (80,65,57,42,32,24,21,9,5);
let sortedNames = ["Zenvo","Erica","Jordie","Alicia","Redon"];
console.log("Sorted Names (alphabetically arrange):", sortedNames); = ("Alicia","Erica","Jordie","Redon","Zenvo"];

//coding problem 3
//mdArray.js
let subArray1 = ["Genevieve","Juan","Luna","Gabriel","Elise"];
let subArray2 = [24,65,21,5,9];
//restructured the arrays 
let restructuredArray = subArray1.map((name,index) => [name,subArray2[index]]);
console.log(subArray); = ['Genevieve',24],['Juan',64],['Luna',21],['Gabriel',5],['Elise',9];

//coding problem 4
//lloNodeListing.js
class Node {constructor(value)};
class LinkedList {constructor(value)};
append(value){const newNode = new Node(value);
else{let current = this.head};
{let current =this.head};,{const elements = []};,{while(current!==null};
{elements.push(current.value); current.next};
console.log(LinkedList:[{elements.join("->")}]â€™)};
const linkedList = new LinkedList();
linkedList.append("Data Structures - Array");
linkedList.append("Variable Type - Integer");
linkedList.append("Sorting Algorithm - Bubble Sort");
LinkedList: [Data Structures - Array]
LinkedList: [Data Structure - Array -> Variable Type - Integer]
LinkedList: [Data Structure - Array -> Variable Type - Integer -> Sorting Algorithm - Bubble Sort]

//coding problem 5
//groceryStacks.js
const groceries = [];
const maxItems = (5);
function peek() {if (groceries.length === 0)};
console.log("The Stack is empty");
console.log('Top item:{groceries[groceries.length - 1]});
push(item);
if (groceries.length < maxItems);
groceries.push(item);
console.log('{item} has been added to the stack');
console.log("The stack is full.Cannot add more items")};
console.log("Updated stack:", groceries);
pop();
if (groceries.length === 0);
console.log("The stack is empty.Nothing to remove");
const removedItem = groceries.pop();
console.log('{removedItem} has been removed from the stack');
peek();
console.log("Updated stack:", groceries);
for(let i = 0; i < maxItems; i++);
{const item = prompt('Enter grocery item {i + 1}:');push(item)};

//coding problem 6
//sortingAlgoBubble.js
function bubbleSort(arr) 
{ let n = arr.length;
let comparisonLog = ""; //
(let i = 0; i < n - 1; i++) {
(let j = 0; j < n - i - 1; j++) {
console.log("Comparison Process:" + comparisonLog);
return arr};
let numbers = [];
let defaultNumbers = [42, 25, 12, 63, 48, 10, 16, 5, 30, 78];
for (let i = 0; i < defaultNumbers.length; i++) {
let input = prompt(`Enter number ${i + 1}:`, defaultNumbers[i]);
 numbers.push(Number(input));
}
console.log("Unsorted Array:",numbers);
let sortedArray = bubbleSort(numbers);
console.log("Sorted Array:", sortedArray);
Unsorted Array: [42,25,12,63,48,10,16,5,30,78]
Comparison Process:
Comparing 42 and 25
Swapped 25 and 42
Comparing 42 and 12
Swapped 12 and 42
Comparing 42 and 63
Sorted Array: [5,10,12,16,25,30,42,48,63,78]
